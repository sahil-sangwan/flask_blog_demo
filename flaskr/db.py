import sqlite3

import click
from flask import current_app, g
from flask.cli import with_appcontext

def get_db(): #returns a database connection; used to execute scripts in schema
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        )
        g.db.row_factory = sqlite3.Row #returns rows with dict behavior

    return g.db

def close_db(e=None): #close the DB connection
    db = g.pop('db', None)

    if db is not None:
        db.close()

def init_db():
    db = get_db()

    # open_resource opens a file with a path that is 
    # relative to the top-level flaskr package
    with current_app.open_resource('schema.sql') as f:
        db.executescript(f.read().decode('utf8'))

# The functions close_db and init_db need to be registered with the running flask application 
# instance. The instance is generated by a factory, so the functions can't be registered to it 
# until runtime. Instead, the function defined below will accept an app and register both functions 
# to it. This function will be imported and called in the app instance factory in the init module.
@click.command('init-db') # the Click API is used by Flask to make command line args
@with_appcontext
def init_db_command():
    """ Clear the existing data and create new tables """
    init_db()
    click.echo('Initialized the database.')

def init_app(app):
    app.teardown_appcontext(close_db)
    app.cli.add_command(init_db_command)